y = c(27, 45),
text = c("<b>2</b>", "<b>4</b>"),
textfont = list(color = "white", size = 8),
showlegend = F) %>%
# Text for legend
add_text(x = c(as.yearmon("2005-01-01"), as.yearmon("2005-01-01"), as.yearmon("2005-01-01"), as.yearmon("2005-01-01")),
y = c(40, 36.67, 33.33, 30),
text = c("<b>1</b>", "<b>2</b>", "<b>3</b>", "<b>4</b>"),
textfont = list(color = "white", size = 8),
showlegend = F) %>%
# Bar chart
add_bars(data = immi, x = ~Year, y = ~USA, yaxis = "y2", xaxis = "x2", showlegend = F,
marker = list(color = "#00526d"), name = "USA") %>%
add_bars(data = immi, x = ~Year, y = ~UK, yaxis = "y2", xaxis = "x2", showlegend = F,
marker = list(color = "#de6e6e"), name = "UK") %>%
layout(legend = list(x = 0.8, y = 0.36, orientation = "h", font = list(size = 10),
bgcolor = "transparent"),
yaxis = list(domain = c(0.4, 0.95), side = "right", title = "", ticklen = 0,
gridwidth = 2),
xaxis = list(showgrid = F, ticklen = 4, nticks = 100,
ticks = "outside",
tickmode = "array",
tickvals = trends$Date,
ticktext = labels,
tickangle = 0,
title = ""),
yaxis2 = list(domain = c(0, 0.3), gridwidth = 2, side = "right"),
xaxis2 = list(anchor = "free", position = 0),
# Annotations
annotations = list(
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "right",
x = 0, y = 1, showarrow = F,
text = "<b>Your home and native land?</b>",
font = list(size = 18, family = "Balto")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "right",
x = 0, y = 0.95, showarrow = F,
align = "left",
text = "<b>Google search volume for <i>'Move to Canada'</i></b><br><sup>100 is peak volume<br><b>Note</b> that monthly averages are used</sup>",
font = list(size = 13, family = "Arial")),
list(xref = "plot", yref = "plot", xanchor = "left", yanchor = "right",
x = as.yearmon("2005-03-01"), y = 40, showarrow = F,
align = "left",
text = "<b>George W. Bush is re-elected</b>",
font = list(size = 12, family = "Arial"),
bgcolor = "white"),
list(xref = "plot", yref = "plot", xanchor = "left", yanchor = "right",
x = as.yearmon("2005-03-01"), y = 36.67, showarrow = F,
align = "left",
text = "<b>Canadian minister visits Britain, ecourages skilled workers to move</b>",
font = list(size = 12, family = "Arial"),
bgcolor = "white"),
list(xref = "plot", yref = "plot", xanchor = "left", yanchor = "right",
x = as.yearmon("2005-03-01"), y = 33.33, showarrow = F,
align = "left",
text = "<b>Super tuesday: Donald Trump wins 7 out of 11 republican primaries</b>",
font = list(size = 12, family = "Arial"),
bgcolor = "white"),
list(xref = "plot", yref = "plot", xanchor = "left", yanchor = "right",
x = as.yearmon("2005-03-01"), y = 30, showarrow = F,
align = "left",
text = "<b>Britain votes 52-48% to leave the Europen Union</b>",
font = list(size = 12, family = "Arial"),
bgcolor = "white"),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "right",
x = 0, y = 0.3, showarrow = F,
align = "left",
text = "<b>Annual immigration to Canada</b>",
font = list(size = 12, family = "Arial")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "right",
x = 0, y = -0.07, showarrow = F,
align = "left",
text = "<b>Source:</b> Google trends and national statistics",
font = list(size = 12, family = "Arial")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "right",
x = 0.85, y = 0.98, showarrow = F,
align = "left",
text = 'Inspired by <a href = "http://www.economist.com/blogs/graphicdetail/2016/07/daily-chart">The economist</a>',
font = list(size = 12, family = "Arial"))),
paper_bgcolor = "#f2f2f2",
margin = list(l = 18, r = 30, t = 18),
width = 1024,height = 600)
print(p)
# Otras visualizaciones 3
#ver el siguiente enlace
# https://moderndata.plot.ly/time-series-charts-by-the-economist-in-r-using-plotly/
library(plotly)
library(zoo)
library(tidyr)
library(dplyr)
# Aids Data
df <- read.csv("https://cdn.rawgit.com/plotly/datasets/master/Aids%20Data.csv", stringsAsFactors = F)
# AIDS Related Deaths ####
plot.df <- df %>%
filter(Indicator == "AIDS-related deaths") %>%
filter(Subgroup %in% c("All ages estimate",
"All ages upper estimate",
"All ages lower estimate"))
# Munge
plot.df <- plot.df %>%
select(Subgroup, Time.Period, Data.Value) %>%
spread(Subgroup, Data.Value) %>%
data.frame()
hovertxt <- paste0("<b>Year: </b>", plot.df$Time.Period, "<br>",
"<b>Est.: </b>", round(plot.df$All.ages.estimate/1e6,2),"M<br>",
"<b>Lower est.: </b>", round(plot.df$All.ages.lower.estimate/1e6,2),"M<br>",
"<b>Upper est.: </b>", round(plot.df$All.ages.upper.estimate/1e6,2), "M")
# Plot
p <- plot_ly(plot.df, x = ~Time.Period, showlegend = F) %>%
add_lines(y = ~All.ages.estimate/1e6, line = list(width = 4, color = "#1fabdd"),
hoverinfo = "text", text = hovertxt) %>%
add_lines(y = ~All.ages.lower.estimate/1e6, line = list(color = "#93d2ef"),
hoverinfo = "none") %>%
add_lines(y = ~All.ages.upper.estimate/1e6, line = list(color = "#93d2ef"),
fill = "tonexty",
hoverinfo = "none")
# New HIV Infections ####
plot.df <- df %>%
filter(Indicator == "New HIV Infections") %>%
filter(Subgroup %in% c("All ages estimate",
"All ages upper estimate",
"All ages lower estimate"))
# Munge
plot.df <- plot.df %>%
select(Subgroup, Time.Period, Data.Value) %>%
spread(Subgroup, Data.Value) %>%
data.frame()
hovertxt <- paste0("<b>Year: </b>", plot.df$Time.Period, "<br>",
"<b>Est.: </b>", round(plot.df$All.ages.estimate/1e6,2),"M<br>",
"<b>Lower est.: </b>", round(plot.df$All.ages.lower.estimate/1e6,2),"M<br>",
"<b>Upper est.: </b>", round(plot.df$All.ages.upper.estimate/1e6,2), "M")
# Add to current plot
p <- p %>%
add_lines(data = plot.df, y = ~All.ages.estimate/1e6, line = list(width = 4, color = "#00587b"),
hoverinfo = "text", text = hovertxt) %>%
add_lines(data = plot.df, y = ~All.ages.lower.estimate/1e6, line = list(color = "#3d83a3"),
hoverinfo = "none") %>%
add_lines(data = plot.df, y = ~All.ages.upper.estimate/1e6, line = list(color = "#3d83a3"),
fill = "tonexty",
hoverinfo = "none")
# People receiving ART ####
x <- c(2010:2015)
y <- c(7501470, 9134270, 10935600, 12936500, 14977200, 17023200)
hovertxt <- paste0("<b>Year:</b>", x, "<br>",
"<b>Est.:</b> ", round(y/1e6,2), "M")
p <- p %>%
add_lines(x = x, y = y/1e6, line = list(width = 5, color = "#e61a20"),
yaxis = "y2",
hoverinfo = "text", text = hovertxt)
# Layout
p <- p %>%
layout(xaxis = list(title = "", showgrid = F, ticklen = 4, ticks = "inside",
domain = c(0, 0.9)),
yaxis = list(title = "", gridwidth = 2, domain = c(0, 0.9), range = c(-0.01, 4)),
yaxis2 = list(overlaying = "y", side = "right", showgrid = F, color = "#e61a20",
range = c(5,18)),
annotations = list(
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "right",
x = 0, y = 1, showarrow = F, align = "left",
text = "<b>Keeping the pressure up<br><sup>Worldwide, (in millions)</sup></b>",
font = list(size = 18, family = "Arial")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "right",
x = 0, y = -0.07, showarrow = F, align = "left",
text = "<b>Source: UNAIDS</b>",
font = list(size = 10, family = "Arial", color = "#bfbfbf")),
list(xref = "plot", yref = "plot", xanchor = "left", yanchor = "right",
x = 1995, y = 3.92, showarrow = F, align = "left",
text = "<b>New HIV Infections(per year)</b>",
font = list(size = 12, family = "Arial", color = "#00587b")),
list(xref = "plot", yref = "plot", xanchor = "left", yanchor = "right",
x = 1999, y = 1, showarrow = F, align = "left",
text = "<b>AIDS related deaths (per year)</b>",
font = list(size = 12, family = "Arial", color = "#1fabdd")),
list(xref = "plot", yref = "plot", xanchor = "left", yanchor = "right",
x = 2010, y = 3, showarrow = F, align = "left",
text = "<b>People receving Anti-<br>Retroviral Therapy (total)</b>",
font = list(size = 12, family = "Arial", color = "#e61a20")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "right",
x = 0.85, y = 0.98, showarrow = F,
align = "left",
text = 'Inspired by <a href = "http://www.economist.com/blogs/graphicdetail/2016/05/daily-chart-23">The economist</a>',
font = list(size = 12, family = "Arial")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "middle",
x = 0.375, y = 0.9, showarrow = F, align = "left",
text = "<b>Lower bound</b>",
font = list(size = 10, family = "Arial", color = "#8c8c8c")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "middle",
x = 0.375, y = 0.95, showarrow = F, align = "left",
text = "<b>Higher bound</b>",
font = list(size = 10, family = "Arial", color = "#8c8c8c")),
list(xref = "paper", yref = "paper", xanchor = "left", yanchor = "middle",
x = 0.485, y = 0.925, showarrow = F, align = "left",
text = "<b>Estimate</b>",
font = list(size = 10, family = "Arial", color = "#8c8c8c"))
),
shapes = list(
list(type = "rectangle",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 0.9, y1 = 0.95,
fillcolor = "#d9d9d9",
line = list(width = 0)),
list(type = "line",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 0.9, y1 = 0.9,
line = list(width = 2, color = "#8c8c8c")),
list(type = "line",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 0.95, y1 = 0.95,
fillcolor = "#bfbfbf",
line = list(width = 2, color = "#8c8c8c")),
list(type = "line",
xref = "paper", yref = "paper",
x0 = 0.45, x1 = 0.48, y0 = 0.925, y1 = 0.925,
fillcolor = "#bfbfbf",
line = list(width = 2, color = "#404040"))),
height = 600,width = 1024)
print(p)
#######  Y el más impresionante de todos ########
library(dygraphs)
library(xts)          # To make the convertion data-frame / xts format
library(tidyverse)
library(lubridate)
library(readr)
bike <- read_csv("E:/Cursos/UCR Estadística/UCR Series Cronológicas/Laboratorios/Labo1/bike.csv")
#View(bike)
str(bike)
# Since my time is currently a factor, I have to convert it to a date-time format!
bike$datetime = ymd_hms(bike$datetime)
# Then you can create the xts format, and thus use dygraph
don=xts(x = bike$count, order.by = bike$datetime)
dygraph(don) %>%
dyOptions(labelsUTC = TRUE, fillGraph=TRUE, fillAlpha=0.1, drawGrid = FALSE, colors="#D8AE5A") %>%
dyRangeSelector() %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE)  %>%
dyRoller(rollPeriod = 1)
###################################################
#                                                 #
#   Otro tipos de descomposiciones o formas de    #
#         describir el fenómeno                   #
#                                                 #
###################################################
# https://datamarket.com/data/set/22xr/monthly-beer-production-in-australia-megalitres-includes-ale-and-stout-does-not-include-beverages-with-alcohol-percentage-less-than-115-jan-1956-aug-1995#!ds=22xr&display=line
library(fpp)
library(astsa)
library(DT)
library(dygraphs)
library(readxl)
beer <- read_excel("E:/Cursos/UCR Estadística/UCR Series Cronológicas/Laboratorios/Labo1/monthly-beer-production-in-austr.xlsx")
#View(monthly_beer_production_in_austr)
beer.ts <- ts(beer, frequency = 12, start = c(1956,1), end = c(1994,12))
#Se puede analizar para una periodicidad más pequeña para entender mejor el crecimiento
beer.ts.qtr <- aggregate(beer.ts, nfrequency=4)
beer.ts.yr <- aggregate(beer.ts, nfrequency=1)
# Produción en trismestres y años
plot.ts(beer.ts[,2], main = "Monthly Beer Production in Australia", xlab = "Year", ylab = "ML")
plot.ts(beer.ts.qtr[,2], main = "Quarterly Beer Production in Australia", xlab = "Year", ylab = "ML")
#Producción anual suavizamiento
plot.ts(beer.ts.yr[,2], main = "Yearly Beer Production in Australia", xlab = "Year", ylab = "ML")
#Comparación entre años
seasonplot(beer.ts[,2], year.labels = TRUE, year.labels.left=TRUE, col=1:40, pch=19, main = "Monthly Beer Production in Australia - seasonplot", xlab = "Month", ylab = "ML")
#El efecto promedio por año
monthplot(beer.ts[,2], main = "Monthly Beer Production in Australia - monthplot", xlab = "Month", ylab = "ML")
#Misma temática vista desde boxplots por mes
boxplot(beer.ts[,2] ~ cycle(beer.ts[,2]), xlab = "Month", ylab = "ML", main = "Monthly Beer Production in Australia - Boxplot")
#Efecto de la media movil para ventanas de tiempo de 1, 3, 5, 10 años
par(mfrow = c(2,2))
plot(beer.ts[,2], col="gray", main = "1 Year Moving Average Smoothing")
lines(ma(beer.ts[,2], order = 12), col = "red", lwd=3)
plot(beer.ts[,2], col="gray", main = "3 Year Moving Average Smoothing")
lines(ma(beer.ts[,2], order = 36), col = "blue", lwd=3)
plot(beer.ts[,2], col="gray", main = "5 Year Moving Average Smoothing")
lines(ma(beer.ts[,2], order = 60), col = "green", lwd=3)
plot(beer.ts[,2], col="gray", main = "10 Year Moving Average Smoothing")
lines(ma(beer.ts[,2], order = 120), col = "yellow4", lwd=3)
setwd("E:/Cursos/UCR Estadística/UCR Series Cronológicas/Laboratorios/Labo2")
library(fpp)
ausbeer # producción de cerveza por trimestre
#Visualización de la serie
serie.1 <- window(ausbeer, start=1992)
autoplot(serie.1) + xlab("Año") + ylab("Miles de litros") +
ggtitle("Producción trimestral de cerveza en Australia de 1956 al 2008")
# Estimación de la serie utilizando únicamente la tendencia como predictor
serie.1.tendencia <- tslm(serie.1 ~ trend)
summary(serie.1.tendencia)
# Visualización de los valores observador y ajustados
autoplot(serie.1, series="Valor observados") +
autolayer(fitted(serie.1.tendencia), series="Valores ajustados") +
xlab("Año") + ylab("Miles de litros") +
ggtitle("Producción trimestral de cerveza")
# Valoración de los valores ajustados por el modelo con tendencia
cbind(Data=serie.1, Fitted=fitted(serie.1.tendencia)) %>%
as.data.frame() %>%
ggplot(aes(x = Data, y = Fitted,
colour = as.factor(cycle(serie.1)))) +
geom_point() +
ylab("Ajustados") + xlab("Valores actuales") +
ggtitle("Producción trimestral de cerveza") +
scale_colour_brewer(palette="Dark2", name="Trimestre") +
geom_abline(intercept=0, slope=1)
###################################################
#                                                 #
#     La estacionalidad como predictor            #
#                                                 #
###################################################
# Estimación de la serie utilizando tanto la tendencia como la estacionalidad como predictor
serie.2.estacionalidad <- tslm(serie.1 ~ trend+ season)
summary(serie.2.estacionalidad)
# Visualización de los valores observador y ajustados
autoplot(serie.1, series="Valor observados") +
autolayer(fitted(serie.2.estacionalidad), series="Valores ajustados") +
xlab("Año") + ylab("Miles de litros") +
ggtitle("Producción trimestral de cerveza")
# Valoración de los valores ajustados por el modelo con tendencia + estacionalidad
cbind(Data=serie.1, Fitted=fitted(serie.2.estacionalidad)) %>%
as.data.frame() %>%
ggplot(aes(x = Data, y = Fitted,
colour = as.factor(cycle(serie.1)))) +
geom_point() +
ylab("Ajustados") + xlab("Valores actuales") +
ggtitle("Producción trimestral de cerveza") +
scale_colour_brewer(palette="Dark2", name="Trimestre") +
geom_abline(intercept=0, slope=1)
###################################################
#                                                 #
#          Medidas de rendimiento                 #
#                                                 #
###################################################
#Rendimiento según método clásico
accuracy(serie.2.estacionalidad)
CV(serie.2.estacionalidad)
###################################################
#                                                 #
#                El pronóstico                    #
#                                                 #
###################################################
serie.1 <- window(ausbeer, start=1992)
serie.2.estacionalidad <- tslm(serie.1 ~ trend + season)
pronostico <- forecast(serie.2.estacionalidad, h=12)  #3 años
autoplot(pronostico) +
ggtitle("Pronóstico de la producción de cerza utilizando la regresión") +
xlab("Año") + ylab("Miles de litros")
##########################################
#                                                 #
#       Relaciones no lineales                    #
#                                                 #
###################################################
#Vamos a utilizar el archivo de datos marathon
h <- 12
#Estimación de los modelos
fit.lin <- tslm(serie.1 ~ trend)
fcasts.lin <- forecast(fit.lin, h = h)
fit.exp <- tslm(serie.1 ~ trend, lambda = 0)
fcasts.exp <- forecast(fit.exp, h = h)
t <- time(serie.1)
t.break1 <- 1994
t.break2 <- 2002
tb1 <- ts(pmax(0, t - t.break1), start = 1992)
tb2 <- ts(pmax(0, t - t.break2), start = 1992)
fit.pw <- tslm(serie.1 ~ t + tb1 + tb2)
t.new <- t[length(t)] + seq(h)
tb1.new <- tb1[length(tb1)] + seq(h)
tb2.new <- tb2[length(tb2)] + seq(h)
newdata <- cbind(t=t.new, tb1=tb1.new, tb2=tb2.new) %>%
as.data.frame()
fcasts.pw <- forecast(fit.pw, newdata = newdata)
fit.spline <- tslm(serie.1 ~ t + I(t^2) + I(t^3) +
I(tb1^3) + I(tb2^3))
fcasts.spl <- forecast(fit.spline, newdata = newdata)
#Pronósticos de los modelos
autoplot(serie.1) +
autolayer(fitted(fit.lin), series = "Lineal") +
autolayer(fitted(fit.exp), series = "Exponencial") +
autolayer(fitted(fit.pw), series = "Cambio de nivel") +
autolayer(fitted(fit.spline), series = "Spline cúbico") +
autolayer(fcasts.pw, series="Cambio de nivel") +
autolayer(fcasts.lin, series="Lineal", PI=FALSE) +
autolayer(fcasts.exp, series="Exponencial", PI=FALSE) +
autolayer(fcasts.spl, series="Spline cúbico", PI=FALSE) +
xlab("Año") + ylab("Miles de litro") +
ggtitle("Pronóstico de la producción de cerza utilizando la regresiónn") +
guides(colour = guide_legend(title = " "))
#############################################
#                                                 #
#  Regresión múltiple en las series temporales    #
#                                                 #
###################################################
library(fpp2)
#Utilicemos el archivo uschange
#View(uschange)
head(uschange,5)
#Veamos dos variables temporales
autoplot(uschange[,c("Consumption","Income")]) +
ylab("% cambio") + xlab("año")
#Relación entre el consumo y el ingreso
uschange %>%
as.data.frame() %>%
ggplot(aes(x=Income, y=Consumption)) +
ylab("Consumo (trimestre % cambio)") +
xlab("Income (trimestre % cambio)") +
geom_point() +
geom_smooth(method="lm", se=FALSE)
#Regresión entre el consumo y el ingreso
regre.multi.1 <-tslm(Consumption ~ Income, data=uschange)
summary(regre.multi.1)     #Parece que el ingreso es un buen predictor del ingreso
# Sería pertinete utilizar las otras variables: Ingreso, producción, ahorros y desempleo ?
uschange %>%
as.data.frame() %>%
GGally::ggpairs()
# Estimación de la regresión múltiple
regre.multi.2 <- tslm( Consumption ~ Income + Production + Unemployment + Savings, data=uschange)
summary(regre.multi.2)
# Evaluación de los valores ajustados optenidos
autoplot(uschange[,'Consumption'], series="Data") +
autolayer(fitted(regre.multi.2), series="Fitted") +
xlab("Year") + ylab("") +
ggtitle("Percent change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
cbind(Data = uschange[,"Consumption"],
Fitted = fitted(regre.multi.2)) %>%
as.data.frame() %>%
ggplot(aes(x=Data, y=Fitted)) +
geom_point() +
xlab("Valores ajustados") +
ylab("Valores Observados") +
ggtitle("Porcentaje de cambio en US del consumo") +
geom_abline(intercept=0, slope=1)
# Estadístcas de bondad y ajuste
checkresiduals(regre.multi.2)
cbind(Fitted = fitted(regre.multi.2),
Residuals=residuals(regre.multi.2)) %>%
as.data.frame() %>%
ggplot(aes(x=Fitted, y=Residuals)) + geom_point()
library(fpp2)
library(readxl)
library(tseries)
library(timeSeries)
library(forecast)
library(TTR)
library(lubridate)
library(plotly)
library(plyr)
library(ggthemes)
library(gridExtra)
library(scales)
library(ggplot2)
library(tidyr)
library(dplyr)
library(smooth)
library(astsa)
library(fpp)
library(fpp2)
library(VGAMdata)
library(GGally)
library(fpp2)
#View(uschange)
head(uschange,5)
autoplot(uschange[,c("Consumption","Income")]) +
ylab("% cambio") + xlab("año")
uschange %>%
as.data.frame() %>%
ggplot(aes(x=Income, y=Consumption)) +
ylab("Consumo (trimestre % cambio)") +
xlab("Income (trimestre % cambio)") +
geom_point() +
geom_smooth(method="lm", se=FALSE)
regre.multi.1 <-tslm(Consumption ~ Income, data=uschange)
summary(regre.multi.1)     #Parece que el ingreso es un buen predictor del ingreso
uschange %>%
as.data.frame() %>%
GGally::ggpairs()
regre.multi.2 <- tslm( Consumption ~ Income + Production + Unemployment + Savings, data=uschange)
summary(regre.multi.2)
autoplot(uschange[,'Consumption'], series="Data") +
autolayer(fitted(regre.multi.2), series="Fitted") +
xlab("Year") + ylab("") +
ggtitle("Percent change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
cbind(Data = uschange[,"Consumption"],
Fitted = fitted(regre.multi.2)) %>%
as.data.frame() %>%
ggplot(aes(x=Data, y=Fitted)) +
geom_point() +
xlab("Valores ajustados") +
ylab("Valores Observados") +
ggtitle("Porcentaje de cambio en US del consumo") +
geom_abline(intercept=0, slope=1)
cbind(Data = uschange[,"Consumption"],
Fitted = fitted(regre.multi.2)) %>%
as.data.frame() %>%
ggplot(aes(x=Data, y=Fitted)) +
geom_point() +
xlab("Valores ajustados") +
ylab("Valores Observados") +
ggtitle("Porcentaje de cambio en US del consumo") +
geom_abline(intercept=0, slope=1)
checkresiduals(regre.multi.2)
cbind(Fitted = fitted(regre.multi.2),
Residuals=residuals(regre.multi.2)) %>%
as.data.frame() %>%
ggplot(aes(x=Fitted, y=Residuals)) + geom_point()
pronostico.2 <- forecast(regre.multi.2,xreg=rep(mean(uschange[,2:5])  ,h=16)  #4 años
autoplot(pronostico.2) +
ggtitle("Pronóstico de la producción de cerza utilizando la regresión") +
xlab("Año") + ylab("Miles de litros")
pronostico.2 <- forecast(regre.multi.2,xreg=rep(mean(uschange[,2])  ,h=16)  #4 años
pronostico.2 <- forecast(regre.multi.2,xreg=rep(mean(uschange[,2])  ,h=16))    #4 años
pronostico.2 <- forecast(regre.multi.2, xreg=rep(mean(uschange[,2])  ,h=16))    #4 años
pronostico.2 <- forecast(regre.multi.2, xreg=uschange[,2])  ,h=16))    #4 años
pronostico.2 <- forecast(regre.multi.2, h=16, xreg=data.frame(Income))    #4 años
names(uschange)
x=c(Income,Production,Unemployment,Savings)
x=c(uschange$Income,uschange$Production,uschange$Unemployment,uschange$Savings)
